---
title: "BOSS"
---


```{python}
#| label: tbl-boss-visits
#| tbl-cap: BOSS visits
from IPython.display import Markdown
from tabulate import tabulate
from astra.models import BossVisitSpectrum
from peewee import fn

table = (
    BossVisitSpectrum.select(
        BossVisitSpectrum.release, 
        BossVisitSpectrum.run2d, 
        BossVisitSpectrum.telescope,
        fn.count(BossVisitSpectrum)
    )
    .group_by(
        BossVisitSpectrum.release, 
        BossVisitSpectrum.run2d,
        BossVisitSpectrum.telescope
    )
    .order_by(
        BossVisitSpectrum.release.desc()
    )
    .tuples()
)

Markdown(tabulate(
    [(*_, f"{c:,}") for *_, c in table], 
    headers=[
        "Release", 
        "DRP",
        "Telescope", 
        "Spectra"
    ]
))
```


# Observing conditions

```{python}
from astropy.table import Table
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import binned_statistic_2d
from matplotlib.colors import LogNorm


def plot_binned_statistic(
    x, y, z,
    bins=100,
    function=np.nanmedian,
    xlabel=None,
    ylabel=None,
    zlabel=None,
    ax=None,
    colorbar=False,
    figsize=(8, 8),
    vmin=None,
    vmax=None,
    min_entries_per_bin=None,
    subsample=None,
    mask=None,
    full_output=False,
    **kwargs
):
    
    if ax is None:
        fig, ax = plt.subplots(1, 1, figsize=figsize)
    else:
        fig = ax.figure
    
    finite = np.isfinite(x * y * z)
    if mask is not None:
        finite *= mask
    if subsample is not None:
        idx = np.where(finite)[0]
        if subsample < 1:
            subsample *= idx.size
        if int(subsample) > idx.size:
            finite = idx
        else:
            finite = np.random.choice(idx, int(subsample), replace=False)
    
    H, xedges, yedges, binnumber = binned_statistic_2d(
        x[finite], y[finite], z[finite],
        statistic=function, bins=bins)

    if min_entries_per_bin is not None:
        if function != "count":
            H_count, xedges, yedges, binnumber = binned_statistic_2d(
                x[finite], y[finite], z[finite],
                statistic="count", bins=bins)

        else:
            H_count = H

        H[H_count < min_entries_per_bin] = np.nan


    if (vmin is None or vmax is None) and "norm" not in kwargs:
        vmin_default, med, vmax_default = np.nanpercentile(H, kwargs.pop("norm_percentiles", [5, 50, 95]))
        if vmin is None:
            vmin = vmin_default
        if vmax is None:
            vmax = vmax_default
    
    imshow_kwds = dict(
        vmin=vmin, vmax=vmax,
        aspect=np.ptp(xedges)/np.ptp(yedges), 
        extent=(xedges[0], xedges[-1], yedges[-1], yedges[0]),
        cmap="inferno",
        interpolation="bilinear")
    imshow_kwds.update(kwargs)
    
    image = ax.imshow(H.T, **imshow_kwds)
    if colorbar:
        cbar = plt.colorbar(image, ax=ax)
        if zlabel is not None:
            cbar.set_label(zlabel)

    if xlabel is not None:
        ax.set_xlabel(xlabel)
    if ylabel is not None:
        ax.set_ylabel(ylabel)

    return (fig, image) if full_output else fig


# convert to a table for ease of plotting
meta = Table(rows=list(
        BossVisitSpectrum
        .select(
            BossVisitSpectrum.mjd,
            BossVisitSpectrum.snr,
            BossVisitSpectrum.seeing,
            BossVisitSpectrum.dust_a,
            BossVisitSpectrum.dust_b,
            BossVisitSpectrum.gust_direction,
            BossVisitSpectrum.gust_speed,
            BossVisitSpectrum.wind_direction,
            BossVisitSpectrum.wind_speed,
            BossVisitSpectrum.telescope
        )
        .dicts()
    )
)
```


```{python}
def plot_binned_statistic_by_mjd(field, ybins=30, ylabel=None, **kwargs):
    fig, ax = plt.subplots()
    default_kwds = dict(
        function="count",
        ax=ax,
        interpolation="none",
        cmap="Greys",
        bins=(
            np.unique(meta["mjd"]).size,
            ybins
        ),
    )
    default_kwds.update(kwargs)
    y = np.array([yi or np.nan for yi in meta[field]])
    _, image = plot_binned_statistic(
        meta["mjd"],
        y,
        y,
        full_output=True,
        **default_kwds
    )
    ratio = 0.5
    ax.set_aspect(ratio * np.ptp(ax.get_xlim())/np.ptp(ax.get_ylim()))
    cbar = plt.colorbar(image,fraction=0.046 * ratio, pad=0.04)
    cbar.set_label("Count")
    ax.set_ylim(ax.get_ylim()[::-1])
    ax.set_xlabel("MJD")
    ax.set_ylabel(ylabel)
    return fig

fig = plot_binned_statistic_by_mjd(
    "snr", 
    np.linspace(0, 100, 50), 
    "S/N", 
    norm=LogNorm()
) 
None
```


### Seeing
```{python}
fig = plot_binned_statistic_by_mjd(
    "seeing", 
    np.linspace(0, 5, 50),
    "Seeing [arcsec]"
) 
None
```


### Wind
```{python}
#| echo: false
import pandas as pd

def speed_labels(bins, units):   
    labels = []
    for left, right in zip(bins[:-1], bins[1:]):
        if left == bins[0]:
            labels.append('calm'.format(right))
        elif np.isinf(right):
            labels.append('>{} {}'.format(left, units))
        else:
            labels.append('{} - {} {}'.format(left, right, units))

    return list(labels)

def _convert_dir(directions, N=None):
    if N is None:
        N = directions.shape[0]
    barDir = directions * np.pi/180. - np.pi/N
    barWidth = 2 * np.pi / N
    return barDir, barWidth
spd_bins = [-1, 0, 5, 10, 15, 20, 25, 30, 35, 40, np.inf]
spd_labels = speed_labels(spd_bins, units='km/s')

dir_bins = np.arange(-7.5, 370, 15)
dir_labels = (dir_bins[:-1] + dir_bins[1:]) / 2

prefix = "gust"

meta[f"{prefix}_speed"] = meta[f"{prefix}_speed"].astype(float)
meta[f"{prefix}_direction"] = meta[f"{prefix}_direction"].astype(float)

keep = np.isfinite(meta[f"{prefix}_direction"] * meta[f"{prefix}_speed"])
meta_pd = meta[keep].to_pandas()

calm_count = (meta[f"{prefix}_speed"] == 0)
total_count = len(meta)
gust_data = (
    meta_pd.assign(WindSpd_bins=lambda df:
            pd.cut(df[f'{prefix}_speed'], bins=spd_bins, labels=spd_labels, right=True)
         )
        .assign(WindDir_bins=lambda df:
            pd.cut(df[f'{prefix}_direction'], bins=dir_bins, labels=dir_labels, right=False)
         )
        .replace({'WindDir_bins': {360: 0}})
        .groupby(by=['WindSpd_bins', 'WindDir_bins'])
        .size()
        .unstack(level='WindSpd_bins')
        .fillna(0)
        #.assign(calm=lambda df: calm_count / total_count)
        .sort_index(axis=1)
        .applymap(lambda x: x / total_count * 100)
)



prefix = "wind"
meta[f"{prefix}_speed"] = meta[f"{prefix}_speed"].astype(float)
meta[f"{prefix}_direction"] = meta[f"{prefix}_direction"].astype(float)

keep = np.isfinite(meta[f"{prefix}_direction"] * meta[f"{prefix}_speed"])
meta_pd = meta[keep].to_pandas()

wind_data = (
    meta_pd.assign(WindSpd_bins=lambda df:
            pd.cut(df[f'{prefix}_speed'], bins=spd_bins, labels=spd_labels, right=True)
         )
        .assign(WindDir_bins=lambda df:
            pd.cut(df[f'{prefix}_direction'], bins=dir_bins, labels=dir_labels, right=False)
         )
        .replace({'WindDir_bins': {360: 0}})
        .groupby(by=['WindSpd_bins', 'WindDir_bins'])
        .size()
        .unstack(level='WindSpd_bins')
        .fillna(0)
        #.assign(calm=lambda df: calm_count / total_count)
        .sort_index(axis=1)
        .applymap(lambda x: x / total_count * 100)
)

from matplotlib import cm
def wind_rose(rosedata, wind_dirs, ax, palette=None, legend=True):
    #if palette is None:
    #    palette = seaborn.color_palette('inferno', n_colors=rosedata.shape[1])
    palette = cm.get_cmap('inferno', rosedata.shape[1])

    bar_dir, bar_width = _convert_dir(wind_dirs)

    ax.set_theta_direction('clockwise')
    ax.set_theta_zero_location('N')

    for n, (c1, c2) in enumerate(zip(rosedata.columns[:-1], rosedata.columns[1:])):
        if n == 0:
            # first column only
            ax.bar(bar_dir, rosedata[c1].values, 
                   width=bar_width,
                   color=palette(0),
                   edgecolor='none',
                   label=c1 if legend else None,
                   linewidth=0)

        # all other columns
        ax.bar(bar_dir, rosedata[c2].values, 
               width=bar_width, 
               bottom=rosedata.cumsum(axis=1)[c1].values,
               color=palette(n+1),
               edgecolor='none',
               label=c2 if legend else None,
               linewidth=0)

    if legend:
        leg = ax.figure.legend(ncol=5, loc="lower center")
    xtl = ax.set_xticklabels(['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'])
    
    return fig

directions = np.arange(0, 360, 15)
fig, axes = plt.subplots(1, 2, figsize=(10, 10), subplot_kw=dict(polar=True))

wind_rose(wind_data, directions, axes[0], legend=False)
wind_rose(gust_data, directions, axes[1])
axes[0].set_title("Wind")
axes[1].set_title("Gust")
None
```

### Dust