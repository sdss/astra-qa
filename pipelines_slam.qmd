---
title: "SLAM"
bibliography: bibliography.bib
author:
  - name: "Jiadong Li"
    affiliation:
      - name: Chinese Academy of Sciences
  - name: Yingyi Song
    affiliation: University of Toronto
---

```{python}
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table
from astra.utils import expand_path
from astra.models import Source

import astra_qa as qa
from astra import __version__
from astra.models import (
    Slam as MODEL,
    BossVisitSpectrum as VISIT_SPECTRUM_MODEL,
    BossCombinedSpectrum as COADD_SPECTRUM_MODEL
)
```

# Summary

The Stellar LAbel Machine (SLAM) is a data-driven forward model based on support vector regression (SVR), which was trained on 1,409 FGK+M wide binaries selected from LAMOST.

The metallicity of M-dwarf stars in SDSS-V is calibrated using the [Fe/H] of M-dwarf stars. This is achieved by identifying 1409 FGK+M wide binaries from LAMOST, using the Stellar LAbel Machine (SLAM) model [@slam], which is a data-driven forward model based on support vector regression (SVR). The trained label [Fe/H] is from FGK companions in the range of -1 < [Fe/H] < 0.5 dex, and the uncertainties of [Fe/H] and Teff estimated from SLAM are ∼0.15 dex and ∼40 K, respectively. The  validation between SLAM labels and literature results showed no bias within a scatter of ∼0.15 dex.

The pipeline summary files include;

```{python}
qa.render_links_to_summary_files(MODEL)
```

Pipelines are usually executed on coadded spectra and on visit (epoch) spectra. 
Even if a pipeline only runs on spectra from one instrument (e.g., APOGEE), there are still many derivative products of those spectra, and different ways they can be stored.

For example, a pipeline might require the input spectra to be at the rest frame and resampled onto a common wavelength grid, so it is not expected to report results from spectra that are stored in the observed frame.
Or there might be multiple variants of rest-frame spectra of the same observation, which vary in how they were resampled or combined. 

The table below lists all spectrum models in `astra`, and the number of pipeline results for that spectrum model.

```{python}
qa.render_row_counts_by_spectrum_model(MODEL)
```

The following figure shows the number of visit spectra and the number of pipeline results as a function of time, which can be useful for identifying any chronological chunks of missing or problematic data.
Here we are showing visit spectra from the spectrum model that is most frequently analysed by this pipeline.

```{python}
#| out-width: 100%
#| fig-format: png
fig = qa.plot_visits_by_mjd(VISIT_SPECTRUM_MODEL, MODEL)
```


# Calibrations

## Error model

### Formal (raw) error

These plots show the log density of raw formal error reported by the pipeline as a function of spectrum S/N ratio.

```{python}
fig = qa.plot_formal_error_wrt_snr(
  MODEL, 
  (VISIT_SPECTRUM_MODEL, ), 
  label_names=("teff", "fe_h"),
  unflagged=False,
)
```

### Calibrated error

```{python}
fig = qa.plot_z_scores("SLAM")
```


# Reference

The following papers describe the pipeline in more detail:

::: {.callout-warning}
## No references

We need to gather references for this pipeline and put them here.
:::


## Field descriptions
```{python}
qa.render_data_model(MODEL)
```

## Flag definitions

The table below gives the pipeline flag definitions, their descriptions, and the number of times that flag is set `True` on a result in the database.

```{python}
qa.render_flag_definitions(MODEL)
```



```{python}
from datetime import datetime
from IPython.display import Markdown
Markdown(f"This page was built on {datetime.now()}.")
```
